// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?
  email           String    @unique
  hashedPassword  String?
  role            String    @default("USER")
  bio             String?
  emailVerifiedAt DateTime?

  username String? @unique

  events   Event[]
  tokens   Token[]
  sessions Session[]
  comment  Comment[]
  favorite Favorite[]
  follower Follow[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Event {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  bookMarked  Boolean?

  eventTag EventTag[]
  comment  Comment[]
  favorite Favorite[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model EventTag {
  id String @id @default(uuid())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String
}

model Favorite {
  id String @id @default(uuid())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Follow {
  id String @id @default(uuid())

  follower User   @relation(fields: [userId], references: [id])
  userId   String
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Tag {
  id          String @id @default(uuid())
  displayName String

  eventTag EventTag[]
}

model Contact {
  id      String  @id @default(uuid())
  name    String?
  email   String?
  subject String
  message String?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
}
